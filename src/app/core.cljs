(ns app.core
  (:require ["@blueprintjs/core" :as bp]
            [clojure.core.async :refer-macros [go]]
            [cljs-promises.async :refer-macros [<?]]
            [reagent.core :as r]
            [reagent.dom :as rdom]
            [re-frame.core :as rf]
            [app.util :refer [hash-route]]
            [app.events]
            [app.fx :refer [storage-get]]
            [app.subs]
            [app.view.components :as comp :refer [set-href]]
            [app.view.main :refer [main]]
            [app.view.login-form :refer [login-form]]))

(defn root []
  (let [[loading user] (for [k [:loading :user]] @(rf/subscribe [k]))]
    [:div (cond loading [comp/loading]
                user    [main]
                :else   [login-form])]))

(defn href-exporter [mutations]     ; ensuring that URLs generated by *html behave like comp/href
  (doseq [mutation mutations, new-node (-> mutation .-addedNodes js/Array.from)
          :when (.-querySelectorAll new-node), e (js/Array.from (.querySelectorAll new-node "a"))]
    (if-not (seq (.-target e))
      (js/Object.assign e #js{:target "_blank", :onmouseenter #(set-href (.-href e)), :onmouseleave #(set-href nil)}))))

(defn ^:dev/after-load start []
  (rf/clear-subscription-cache!)
  (rdom/render [root] (.getElementById js/document "app")))

(defn ^:export init []
  (rf/dispatch-sync [:initialize-db])
  (cljs-promises.async/extend-promises-as-pair-channels!)
  (when-let [logon (storage-get :logon)]
    (rf/dispatch [:fb-init logon]))
  (aset js/window "onhashchange" #(rf/dispatch [:change-list (hash-route)]))
  (. (js/MutationObserver. href-exporter) observe js/document.body #js{:childList true, :subtree true})
  (. js/document.body addEventListener "scroll" #(rf/dispatch [:set :scroll js/document.body.scrollTop]))
  (start))
